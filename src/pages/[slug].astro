---
import { getCollection } from "astro:content"
import { Icon } from "astro-icon/components"

import BlogCard from "~/components/blog/BlogCard.astro"
import Layout from "~/layouts/Layout.astro"
import ShareButtons from "~/components/blog/ShareButtons.astro"
import AuthorCard from "~/components/blog/AuthorCard.astro"
import ReadingProgress from "~/components/blog/ReadingProgress.astro"
import { formatDate } from "~/utils/date"
import type { BlogPost } from "~/types/blog"
import BlogHeader from "~/components/blog/BlogHeader.astro"
import LogoXLight from "~/assets/brand/logo-light.svg"
import NewsletterSignup from "~/components/blog/NewsletterSignup.astro"

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => {
    return data.draft !== true
  })

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }))
}

const { post }: { post: BlogPost } = Astro.props
const { data, render } = post
const { Content } = await render()

const postImage = data.coverImage || data.image
const postAuthor = data.author || "GlueX Team"
const readingTime = data.readingTime || 5

// Get related posts
const allPosts: BlogPost[] = await getCollection("blog", ({ data }) => {
  return data.draft !== true
})

const relatedPosts = allPosts
  .filter((p) => p.slug !== post.slug)
  .filter((p) => {
    const sameCategory = data.category && p.data.category?.slug === data.category.slug
    const sharedTags = data.tags && p.data.tags?.some((tag) => data.tags?.some((postTag) => postTag.slug === tag.slug))
    return sameCategory || sharedTags
  })
  .sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime())
  .slice(0, 3)

const metadata = {
  title: data.title,
  description: data.description || data.excerpt,
  image: postImage,
  article: true,
  publishDate: data.publishDate,
  updateDate: data.updateDate,
  author: postAuthor,
  tags: data.tags?.map((tag) => tag.name),
  category: data.category?.name,
}

const currentUrl = `${Astro.site}blog/${post.slug}`
---

<Layout metadata={metadata}>
  <ReadingProgress />
  <BlogHeader showVideo={false} />

  <div class="min-h-screen bg-[#141718]">
    <!-- Hero Section -->
    <article class="relative">
      <!-- Breadcrumb -->
      <!-- <nav class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 pt-8 pb-4">
        <div class="flex items-center space-x-2 text-sm text-gray-500">
          <a
            href="/"
            class="hover:text-gray-300 transition-colors duration-200"
            >Home</a
          >
          <svg
            class="w-3 h-3"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fill-rule="evenodd"
              d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
              clip-rule="evenodd"
            ></path>
          </svg>
          <span class="text-gray-400 truncate">{data.title}</span>
        </div>
      </nav> -->

      <!-- Header Content -->
      <header class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
        {
          postImage && (
            <div class="relative overflow-hidden rounded-xl">
              <img
                src={postImage}
                alt={data.title}
                class="w-full aspect-2/1 object-cover"
                loading="lazy"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent" />
            </div>
          )
        }

        <!-- Title -->
        <h1 class="text-4xl md:text-5xl xl:text-6xl xl:font-semibold text-white my-6 leading-tight tracking-tight">
          {data.title}
        </h1>

        <!-- Excerpt -->
        {
          data.excerpt && (
            <p class="text-xl md:text-2xl text-gray-300 mb-12 leading-relaxed font-light">{data.description}</p>
          )
        }

        <!-- Author and Meta -->
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="relative">
              <div class="w-12 h-12 bg-black rounded-full flex items-center justify-center">
                <img
                  src={LogoXLight.src}
                  alt="GlueX Logo"
                  class="w-6 h-6"
                  loading="lazy"
                />
              </div>
            </div>
            <div>
              <div class="text-white text-xl">GlueX Protocol</div>
              <div class="flex items-center space-x-1 text-xs text-secondary/70">
                <time datetime={data.publishDate.toISOString()}>
                  {formatDate(data.publishDate)}
                </time>
                <span>•</span>
                <span>{readingTime} min read</span>
                {
                  data.updateDate && (
                    <>
                      <span>•</span>
                      <time datetime={data.updateDate.toISOString()}>Updated {formatDate(data.updateDate)}</time>
                    </>
                  )
                }
              </div>
            </div>
          </div>
        </div>
      </header>

      <!-- Article Content -->
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="gap-12">
          <!-- Main Content -->
          <main class="">
            <div class="prose prose-xl prose-invert max-w-none">
              <Content />
            </div>
          </main>
        </div>
      </div>

      <!-- Article Actions -->
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div class="border-t border-secondary/50 pt-8">
          <div class="flex items-center w-full justify-center sm:justify-between">
            <div class="flex items-center space-x-4">
              <ShareButtons
                class="flex gap-2"
                text={data.title}
                url={currentUrl}
              />
            </div>
            <a
              href="/blog"
              class="hidden sm:inline-flex items-center text-sm font-medium text-gray-400 hover:text-white space-x-1 transition-colors duration-200"
            >
              <Icon
                name="tabler:arrow-back-up"
                class="w-5 h-5"
              />
              Back to Blog
            </a>
          </div>

          <!-- Author Bio -->
          <div class="max-w-4xl mx-auto py-12">
            <AuthorCard author={postAuthor} />
          </div>
        </div>

        <!-- Related Posts -->
        {
          relatedPosts.length > 0 && (
            <section class="bg-gray-900/30 border-t border-gray-800">
              <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
                <div class="text-center mb-16">
                  <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">Continue Reading</h2>
                  <p class="text-gray-400 text-lg">Explore more articles on similar topics</p>
                </div>
                <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                  {relatedPosts.map((relatedPost) => (
                    <BlogCard
                      post={relatedPost}
                      variant="featured"
                    />
                  ))}
                </div>
              </div>
            </section>
          )
        }
      </div>

      <NewsletterSignup />
    </article>

    <script>
      // Smooth scrolling for anchor links
      document.addEventListener("DOMContentLoaded", function () {
        const links = document.querySelectorAll('a[href^="#"]')
        links.forEach((link) => {
          link.addEventListener("click", function (e) {
            e.preventDefault()
            const target = document.querySelector(this.getAttribute("href"))
            if (target) {
              target.scrollIntoView({
                behavior: "smooth",
                block: "start",
              })
            }
          })
        })
      })

      // Copy code blocks
      document.addEventListener("DOMContentLoaded", function () {
        const codeBlocks = document.querySelectorAll("pre code")
        codeBlocks.forEach((block) => {
          const pre = block.parentNode
          const button = document.createElement("button")
          button.className =
            "absolute top-4 right-4 px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white text-xs rounded transition-colors"
          button.textContent = "Copy"

          pre.style.position = "relative"
          pre.appendChild(button)

          button.addEventListener("click", async () => {
            try {
              await navigator.clipboard.writeText(block.textContent)
              button.textContent = "Copied!"
              setTimeout(() => {
                button.textContent = "Copy"
              }, 2000)
            } catch (err) {
              console.error("Failed to copy:", err)
            }
          })
        })
      })
    </script>
  </div>
</Layout>
